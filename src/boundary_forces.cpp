#include <sph_boundary_particles/boundary_forces.h>
#include "boundary.cuh"

#include <cmath>

namespace sample_spheres
{

//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
boundary_forces::boundary_forces ()
{

}

//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
boundary_forces::~boundary_forces ()
{

}
//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
float Wij(glm::vec3 ij, float h)
{
	static float poly = 315.f / (M_PI*powf(h,9));

	float len = glm::length(ij);

	if (len > h) return 0.f ;

	return (poly* (powf(h*h - len*len,3)));
}
//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
void boundary_forces::getVbi(std::vector<float> & vbi, std::vector<glm::vec4> boundary_spheres, float interaction_radius)
{
	vbi.resize(boundary_spheres.size(),0);
	updateVbi((float*)boundary_spheres.data(), (float*)vbi.data(), interaction_radius, boundary_spheres.size());
}

} 
