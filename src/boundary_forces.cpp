#include <sph_boundary_particles/boundary_forces.h>
#include "boundary.cuh"

#include <cmath>

namespace sample_spheres
{

//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
boundary_forces::boundary_forces ()
{

}

//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
boundary_forces::~boundary_forces ()
{

}
//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
float Wij(glm::vec3 ij, float h)
{
	static float poly = 315.f / (M_PI*powf(h,9));

	float len = glm::length(ij);

	if (len > h) return 0.f ;

	return (poly* (powf(h*h - len*len,3)));
}
//====================================================================================================  
//====================================================================================================  
//====================================================================================================  
void boundary_forces::getVbi(std::vector<float> & vbi, std::vector<glm::vec4> boundary_spheres, float interaction_radius)
{
	//for (unsigned int i = 0; i < boundary_spheres.size(); ++i) 
	//{
		//float res = 0.f;
		//for (unsigned int j = 0; j < boundary_spheres.size(); ++j)
		//{
			//if (i != j) 
			//{
				//glm::vec3 p1p2 = boundary_spheres[i].xyz() - boundary_spheres[j].xyz();
				//res += Wij(p1p2, interaction_radius);
			//}	
		//}
		//vbi.push_back( ( 1.f / res ) );
	//}
	vbi.resize(boundary_spheres.size(),0);
	updateVbi((float*)boundary_spheres.data(), vbi.data(), interaction_radius, boundary_spheres.size());
}

} 
